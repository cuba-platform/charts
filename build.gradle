/*
 * Copyright (c) 2011 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

allprojects {
    artifactGroup = 'com.haulmont.charts'
    artifactVersion = '3.0'
    isSnapshot = true
}

buildscript {
    org.apache.ivy.util.url.CredentialsStore.INSTANCE.addCredentials(
            'Sonatype Nexus Repository Manager',
            'repository.haulmont.com',
            System.getenv('HAULMONT_REPOSITORY_USER'),
            System.getenv('HAULMONT_REPOSITORY_PASSWORD')
    )
    repositories {
        mavenLocal()
        mavenRepo(urls: "http://repository.haulmont.com:8587/nexus/content/groups/work")
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: '1.0-SNAPSHOT'
    }
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

def chartsGlobalModule = project(':charts-global')
def chartsGuiModule = project(':charts-gui')
def chartsWebModule = project(':charts-web')
def chartsWebToolkitModule = project(':charts-web-toolkit')

def platformVersion = '3.0-SNAPSHOT'

def servletApi = [group: 'org.apache.tomcat', name: 'servlet-api', version: '6.0.20']

def vaadin = [group: 'com.haulmont.thirdparty', name: 'vaadin', version: '6.6.1.91']
def gwtUser = [group: 'com.google.gwt', name: 'gwt-user', version: '2.3.0']
def gwtDev = [group: 'com.google.gwt', name: 'gwt-dev', version: '2.3.0']
def gwtServlets = [group: 'com.google.gwt', name: 'gwt-servlet', version: '2.3.0']
def validationApi = [group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA']

def cubaWeb = [group: 'com.haulmont.cuba', name: 'cuba-web', version: platformVersion]
def cubaGui = [group: 'com.haulmont.cuba', name: 'cuba-gui', version: platformVersion]

configure([chartsGlobalModule, chartsGuiModule, chartsWebModule, chartsWebToolkitModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.bali', name: 'bali', version: platformVersion)
        compile(group: 'com.haulmont.chile', name: 'chile-core', version: platformVersion)
        compile(group: 'com.haulmont.chile', name: 'chile-jpa', version: platformVersion)
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: platformVersion)

        compile(group: 'jfree', name: 'jfreechart', version: '1.0.13')

        testCompile(group: 'junit', name: 'junit', version: '4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(chartsGlobalModule) {
//    task enhance(dependsOn: [compileJava, processResources], type: CubaEnhancing) {
//        persistenceXml = "$chartsGlobalModule.projectDir/src/charts-persistence.xml"
//        metadataXml = "$chartsGlobalModule.projectDir/src/charts-metadata.xml"
//    }
//    classes.dependsOn compileJava, processResources
}

configure(chartsGuiModule) {
    dependencies {
        compile(chartsGlobalModule)
        compile(cubaGui)
    }
}

configure(chartsWebToolkitModule) {
    dependencies {
        compile(vaadin)

        provided(gwtUser)
        provided(gwtDev)
    }

    jar {
        manifest {
            attributes("Vaadin-Widgetsets": "com.haulmont.charts.toolkit.gwt.ChartsWidgetSet")
        }
    }
}

configure(chartsWebModule) {
    configurations {
        webcontent
        gwtBuilding
    }

    dependencies {        
        compile(chartsGlobalModule)
        compile(chartsGuiModule)
        compile(cubaWeb)

        provided(chartsGuiModule)
        provided(chartsWebToolkitModule)
        provided(gwtUser)
        provided(gwtDev)
        provided(gwtServlets)
        provided(validationApi)
        provided(servletApi)
        provided(cubaWeb)

        gwtBuilding(gwtUser)        
        gwtBuilding(gwtDev)
        gwtBuilding(gwtServlets)
        gwtBuilding(validationApi + [classifier: 'sources'])
        
        webcontent(group: 'com.haulmont.cuba', name: 'cuba-web', version: platformVersion, classifier: 'web', ext: 'zip')        
    }
    
    jar {
        manifest {
            attributes("Vaadin-Widgetsets": "com.haulmont.charts.toolkit.gwt.ChartsWidgetSet")
        }
    }

    File webOutDir = new File("$buildDir/web")

    // task buildGwt(dependsOn: enhanceTheme) << {
    task buildGwt(dependsOn: compileJava) << {
        File widgetsetsDir = new File(webOutDir, "VAADIN/widgetsets")

        if (!widgetsetsDir.exists()) {
            File webToolkitSrcDir = new File(chartsWebToolkitModule.projectDir, 'src')

            def gwtBuildingArtifacts = configurations.gwtBuilding.resolvedConfiguration.getResolvedArtifacts()
            File validationSrcJar = gwtBuildingArtifacts.find { it.name == 'validation-api' }.file

            def mainClasspath = sourceSets.main.compileClasspath.findAll {
                !it.name.contains('jdtcore') && !it.name.contains('popupbutton')
            }

            javaexec {
                main = 'com.google.gwt.dev.Compiler'
                classpath(
                        validationSrcJar,
                        webToolkitSrcDir,
                        chartsWebToolkitModule.sourceSets.main.classesDir,
                        sourceSets.main.classesDir,
                        mainClasspath)
                args('-war', widgetsetsDir.absolutePath, 
                     '-style', 'OBF', 
                     '-localWorkers', '2',
                     //'-logLevel', 'DEBUG', 
                     'com.haulmont.charts.toolkit.gwt.ChartsWidgetSet')
                jvmArgs('-Xmx512m', '-Xss8m', '-XX:MaxPermSize=256m', '-Djava.awt.headless=true',
                /*'-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000'*/)
            }
            ant.delete(dir: new File(widgetsetsDir, 'WEB-INF'))
        } else {
            println "Widgetsets dir exists, skip build GWT"
        }
    }
    assemble.dependsOn buildGwt
    
    task webArchive(dependsOn: buildGwt, type: Zip) {
        from file('web')
        from webOutDir
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}