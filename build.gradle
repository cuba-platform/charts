/*
 * Copyright (c) 2008-2016 Haulmont. All rights reserved.
 * Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.
 */

buildscript {
    ext.cubaVersion = '7.0-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Charts Version ${ext.cubaVersion}")
    println("")
    	
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
        resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'idea')
apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/charts/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.charts'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont. All rights reserved.
Use is subject to license terms, see http://www.cuba-platform.com/commercial-software-license for details.'''
    }
}

def chartsGlobalModule = project(':charts-global')
def chartsGuiModule = project(':charts-gui')
def chartsWebModule = project(':charts-web')
def chartsWebToolkitModule = project(':charts-web-toolkit')

def artifactVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')
def baseVersion = rootProject.hasProperty('cuba.version') ? rootProject['cuba.version'] : artifactVersion

def cubaWeb = [group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion]
def cubaGui = [group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion]
def cubaWebToolkit = [group: 'com.haulmont.cuba', name: 'cuba-web-toolkit', version: baseVersion]

configure([chartsGlobalModule, chartsGuiModule, chartsWebModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'findbugs')
    apply(plugin: 'pmd')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)

        testCompile(bom['junit:junit'])
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": artifactVersion)
        }
    }

    javadoc {
        // move to plugin ?
        options.addStringOption("sourcepath", "")
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = false
        omitVisitors = ['FindDoubleCheck']
        excludeFilter = rootProject.file("findbugs/exclude-filter.xml")
        effort = "max"
        reportLevel = "high"
    }

    findbugsMain {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/findbugs/${project.name}.html")
            }
        }
    }

    findbugsTest {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/findbugs/test-${project.name}.html")
            }
        }
    }

    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("${project.buildDir}/reports/pmd")
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-design",
                "java-unusedcode"
        ]
    }

    pmdMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        source project.fileTree("src")
    }


    task pmdReport(dependsOn: pmdMain, group: 'verification', description:
            'Generates a HTML report after executing PMD checks.') {
        doLast {
            ant.xslt(
                    in: "${project.buildDir}/reports/pmd/main.xml",
                    style: "${rootDir}/findbugs/pmd-nicerhtml.xsl",
                    out: "${project.buildDir}/reports/pmd/main.html")
        }
    }

    check {
        dependsOn += ['pmdReport']
    }
}

configure(chartsWebToolkitModule) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    javadoc {
        // move to plugin ?
        options.addStringOption("sourcepath", "")
    }
}

configure(chartsGlobalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': artifactVersion)
        }
    }
}

configure(chartsGuiModule) {
    dependencies {
        compile(cubaGui)
        compile(chartsGlobalModule)

        compile(bom['com.google.code.gson:gson'])
    }
}

configure(chartsWebToolkitModule) {
    dependencies {
        compile(chartsWebModule)
        compile(cubaWebToolkit)
        compile(bom['com.github.branflake2267:gwt-maps-api']) {
            exclude(group: 'com.google.gwt', module: 'gwt-user')
            exclude(group: 'com.google.gwt', module: 'gwt-servlet')
            exclude(group: 'com.google.gwt', module: 'gwt-dev')
        }
    }

    task buildWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetClass = 'com.haulmont.charts.web.toolkit.ui.ChartsWidgetSet'
    }

    task buildDebugWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetsDir = "$project.buildDir/web-debug/VAADIN/widgetsets"
        widgetSetClass = 'com.haulmont.charts.web.toolkit.ui.ChartsWidgetSet'
        style = 'PRETTY'
    }

    jar {
        from sourceSets.main.allJava
    }

    task webArchive(dependsOn: buildWidgetSet, type: Zip) {
        from file("$buildDir/web")
        classifier = 'web'
    }

    task webDebugArchive(dependsOn: buildDebugWidgetSet, type: Zip) {
        from file("$buildDir/web-debug")
        classifier = 'debug'
    }

    artifacts {
        archives webArchive
        if (!cuba.artifact.isSnapshot) {
            archives webDebugArchive
        }
    }
}

configure(chartsWebModule) {
    dependencies {
        compile(chartsGlobalModule)
        compile(chartsGuiModule)
        compile(cubaWeb)

        compile(bom['org.webjars.bower:pivottable'])
        compile(bom['org.webjars:amcharts'])

        compileOnly(bom['javax.servlet:javax.servlet-api'])
    }

    jar {
        with copySpec {
            from sourceSets.main.allJava
            include 'com/haulmont/charts/web/toolkit/ui/client/**'
        }
    }
}

task aggregateJavadoc(type: Javadoc,
        description: 'Generate javadocs from all child projects as if it was a single project',
        group: 'Documentation') {

    destinationDir = file("$buildDir/docs/javadoc")
    title = "${project.name.toUpperCase()} ${cubaVersion.replace('-SNAPSHOT','')} API"

    options.encoding = 'UTF-8'
    options.addStringOption("sourcepath", "")
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC

    exclude 'com/haulmont/charts/gui/serialization/**'
    exclude 'com/haulmont/charts/gui/xml/layout/loaders/**'

    exclude 'com/haulmont/charts/web/toolkit/**'
    exclude 'com/haulmont/charts/web/gui/**'

    subprojects.each { proj ->
        def javadocTask = proj.tasks.getByPath('javadoc')

        source += javadocTask.source
        classpath += javadocTask.classpath
    }
}