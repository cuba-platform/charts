/*
 * Copyright (c) 2008-2016 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    ext.cubaVersion = '7.3-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Charts Version ${ext.cubaVersion}")
    println("")
    	
    repositories {
        mavenLocal()

        if (System.getenv('HAULMONT_REPOSITORY_URL')) {
            maven {
                credentials {
                    username System.getenv('HAULMONT_REPOSITORY_USER')
                    password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
                }
                url System.getenv('HAULMONT_REPOSITORY_URL')
            }
        } else {
            jcenter()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://dl.bintray.com/cuba-platform/main" }
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
    }
}

configurations {
    bom
}
dependencies {
    bom("com.haulmont.cuba:cuba-global:$cubaVersion")
}

apply(plugin: 'cuba')

bom.load file('modules/global/src/com/haulmont/charts/bom.properties')

cuba {
    artifact {
        group = 'com.haulmont.charts'
        version = project.cubaVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.cubaVersion.endsWith('-SNAPSHOT')
    }

    ide {
        vcs = 'Git'
        copyright = '''Copyright (c) 2008-$today.year Haulmont.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.'''
    }
}

def chartsGlobalModule = project(':charts-global')
def chartsGuiModule = project(':charts-gui')
def chartsWebModule = project(':charts-web')
def chartsModelModule = project(':charts-model')
def chartsWebWidgetsModule = project(':charts-web-widgets')
def chartsWebToolkitModule = project(':charts-web-toolkit')

def artifactVersion = cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : '')
def baseVersion = rootProject.hasProperty('cuba.version') ? rootProject['cuba.version'] : artifactVersion

def cubaWeb = [group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion]
def cubaGui = [group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion]
def cubaWebToolkit = [group: 'com.haulmont.cuba', name: 'cuba-web-toolkit', version: baseVersion]
def cubaWebWidgets = [group: 'com.haulmont.cuba', name: 'cuba-web-widgets', version: baseVersion]

configure([chartsGlobalModule, chartsGuiModule, chartsWebModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'findbugs')
    apply(plugin: 'pmd')
    apply(plugin: 'cuba')
    apply(plugin: 'groovy')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)

        testCompile(bom['org.junit.jupiter:junit-jupiter-api'])
        testCompile(bom['org.junit.jupiter:junit-jupiter-engine'])
        testCompile(bom['org.junit.vintage:junit-vintage-engine'])
        testCompile(bom['org.spockframework:spock-core']) {
            exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
        }
    }

    sourceSets {
        test {
            java {
                include '**/testmodel/**'
            }
            groovy {
                exclude '**/testmodel/**'
                srcDir 'test'
            }
        }
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    jar {
        manifest {
            attributes("Implementation-Version": artifactVersion)
        }
    }

    javadoc {
        options.addStringOption("sourcepath", "")
    }

    findbugs {
        toolVersion = "3.0.1"
        ignoreFailures = false
        omitVisitors = ['FindDoubleCheck']
        excludeFilter = rootProject.file("findbugs/exclude-filter.xml")
        effort = "max"
        reportLevel = "high"
    }

    findbugsMain {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/findbugs/${project.name}.html")
            }
        }
    }

    findbugsTest {
        reports {
            xml.enabled = false
            html {
                enabled = true
                stylesheet = rootProject.resources.text.fromFile("findbugs/fancy-hist.xsl")
                destination file("${project.buildDir}/reports/findbugs/test-${project.name}.html")
            }
        }
    }

    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("${project.buildDir}/reports/pmd")
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-design",
                "java-unusedcode"
        ]
    }

    pmdMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
        source project.fileTree("src")
    }


    task pmdReport(dependsOn: pmdMain, group: 'verification', description:
            'Generates a HTML report after executing PMD checks.') {
        doLast {
            ant.xslt(
                    'in': "${project.buildDir}/reports/pmd/main.xml",
                    'style': "${rootDir}/findbugs/pmd-nicerhtml.xsl",
                    'out': "${project.buildDir}/reports/pmd/main.html")
        }
    }

    check {
        dependsOn += ['pmdReport']
    }

    test {
        useJUnitPlatform()
    }
}

configure([chartsWebWidgetsModule, chartsWebToolkitModule, chartsModelModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    javadoc {
        options.addStringOption("sourcepath", "")
    }
}

configure(chartsGlobalModule) {
    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': artifactVersion)
        }
    }
}

configure(chartsGuiModule) {
    dependencies {
        compile(cubaGui)
        compile(chartsGlobalModule)
        compile(chartsModelModule)

        compile(bom['com.google.code.gson:gson'])
    }
}

configure(chartsWebToolkitModule) {
    dependencies {
        compile(chartsWebWidgetsModule)
        compile(cubaWebToolkit)
        compile(bom['com.github.branflake2267:gwt-maps-api']) {
            exclude(group: 'com.google.gwt', module: 'gwt-user')
            exclude(group: 'com.google.gwt', module: 'gwt-servlet')
            exclude(group: 'com.google.gwt', module: 'gwt-dev')
        }
    }

    task buildWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetClass = 'com.haulmont.charts.web.widgets.ChartsWidgetSet'
    }

    task buildDebugWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetsDir = "$project.buildDir/web-debug/VAADIN/widgetsets"
        widgetSetClass = 'com.haulmont.charts.web.widgets.ChartsWidgetSet'
        style = 'PRETTY'
    }

    jar {
        from sourceSets.main.allJava
    }

    task webArchive(dependsOn: buildWidgetSet, type: Jar) {
        from file("$buildDir/web")
        classifier = 'client'
    }

    task webDebugArchive(dependsOn: buildDebugWidgetSet, type: Jar) {
        from file("$buildDir/web-debug")
        classifier = 'debug-client'
    }

    artifacts {
        archives webArchive
        if (!cuba.artifact.isSnapshot) {
            archives webDebugArchive
        }
    }
}

configure(chartsModelModule) {
    dependencies {
        compile(bom['com.google.code.gson:gson'])
        compile(bom['com.google.code.findbugs:jsr305'])
        compile(bom['org.apache.commons:commons-lang3'])
        compile(bom['org.apache.commons:commons-collections4'])
    }
}

configure(chartsWebWidgetsModule) {
    dependencies {
        compile(chartsModelModule)
        compile(cubaWebWidgets)

        compile(bom['org.webjars.bower:pivottable'])
        compile(bom['org.webjars:amcharts'])
        compile(bom['org.webjars:jquery-ui-touch-punch'])
        compile(bom['com.google.code.gson:gson'])
    }

    jar {
        with copySpec {
            from sourceSets.main.allJava
            include "com/haulmont/charts/web/widgets/client/**"
        }
    }
}

configure(chartsWebModule) {
    dependencies {
        compile(chartsGlobalModule)
        compile(chartsGuiModule)
        compile(chartsWebWidgetsModule)
        compile(cubaWeb)

        compileOnly(bom['javax.servlet:javax.servlet-api'])
    }
}

task aggregateJavadoc(type: Javadoc,
        description: 'Generate javadocs from all child projects as if it was a single project',
        group: 'Documentation') {

    destinationDir = file("$buildDir/docs/javadoc")
    title = "${project.name.toUpperCase()} ${cubaVersion.replace('-SNAPSHOT','')} API"

    options.encoding = 'UTF-8'
    options.addStringOption("sourcepath", "")
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC

    exclude 'com/haulmont/charts/gui/xml/layout/loaders/**'

    exclude 'com/haulmont/charts/web/serialization/**'
    exclude 'com/haulmont/charts/web/widgets/**'
    exclude 'com/haulmont/charts/web/gui/**'

    subprojects.each { proj ->
        def javadocTask = proj.tasks.getByPath('javadoc')

        source += javadocTask.source
        classpath += javadocTask.classpath
    }
}